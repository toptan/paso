-- CREATING TABLES --
CREATE TABLE SYSTEM_USER (
    ID          BIGSERIAL PRIMARY KEY,
    USERNAME    VARCHAR(16) UNIQUE NOT NULL,
    PASSWORD    VARCHAR(16) NOT NULL,
    FIRST_NAME  VARCHAR(32) NOT NULL,
    LAST_NAME   VARCHAR(32) NOT NULL,
    EMAIL       VARCHAR(64) NOT NULL,
    ROLE        VARCHAR(16) NOT NULL
);

CREATE TABLE COURSE (
    ID          BIGSERIAL PRIMARY KEY,
    CODE        VARCHAR(8) UNIQUE NOT NULL,
    NAME        VARCHAR(64) NOT NULL
);

CREATE TABLE ROOM (
    ID          BIGSERIAL PRIMARY KEY,
    NAME        VARCHAR(64) NOT NULL,
    ROOM_NUMBER VARCHAR(8) UNIQUE NOT NULL,
    ROOM_UUID   UUID UNIQUE NOT NULL
);

CREATE TABLE PERSON (
    ID          BIGSERIAL PRIMARY KEY,
    LAST_NAME   VARCHAR(32) NOT NULL,
    FIRST_NAME  VARCHAR(32) NOT NULL,
    EMAIL       VARCHAR(64) UNIQUE,
    RFID        VARCHAR(64) UNIQUE
);

CREATE TABLE STUDENT (
    ID              BIGINT PRIMARY KEY,
    INDEX_NUMBER    VARCHAR(9) UNIQUE NOT NULL,
    YEAR_OF_STUDY   INTEGER NOT NULL,
    FOREIGN KEY(ID) REFERENCES PERSON(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE ENLISTED (
    ID_STUDENT      BIGINT NOT NULL,
    ID_COURSE       BIGINT NOT NULL,
    PRIMARY KEY(ID_STUDENT, ID_COURSE),
    FOREIGN KEY(ID_STUDENT) REFERENCES STUDENT(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(ID_COURSE) REFERENCES COURSE(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE VIEW ENLISTED_STUDENTS AS
SELECT P.ID, S.INDEX_NUMBER, P.LAST_NAME, P.FIRST_NAME, C.CODE
  FROM PERSON P
  JOIN STUDENT S USING(ID)
  LEFT OUTER JOIN ENLISTED E ON E.ID_STUDENT = S.ID
  LEFT OUTER JOIN COURSE C ON E.ID_COURSE = C.ID;

-- INSERTING INITIAL DATA --
INSERT INTO SYSTEM_USER(USERNAME, PASSWORD, FIRST_NAME, LAST_NAME, EMAIL, ROLE)
  VALUES ('root', 'root', 'System', 'Administrator', 'root@paso.system', 'SUPER_USER');
